Actividad Obligatoria para el portafolio 2019 (ambos turnos)
Colecciones - Archivos - Entrada/Salida - Excepciones.
1

Implementar un método estático getPersonas que reciba el nombre de un archivo “personas.in” y 
devuelva un objeto LinkedList<Persona> con personas que fueron leídas del archivo de texto con
 formato: dni apellido edad (tres campos separados por un espacio en blanco). 
 2
 
Implementar un método estático getPersonasOrdenadasPorDni que reciba un objeto LinkedList<Persona>
 y devuelva otro objeto LinkedList<Persona> con las personas ordenadas por DNI. Generar el archivo
  “personaOrdenadas.out” con el contenido del resultado obtenido. 
  
  3
Implementar un método estático getPersonasMayoresAEdad que reciba un objeto LinkedList<Persona> y 
una edad y devuelva otro objeto LinkedList<Persona> con las personas cuyas edades son mayores a esa edad. 
Generar el archivo “personaMayores.out” con el contenido del resultado obtenido. 
Sobreescribir los métodos:
4
equals de Object para determinar que dos objetos personas son iguales si sus dni´s son iguales.
5

toString de Object para aplanar el objeto a una cadena que contiene los colaboradores internos 

del objeto separado por “;”.
6
Implementar un método estático listarPersonas que reciba por parámetro un objeto 


LinkedList<Persona> y un String (que será el nombre del archivo de salida). 
 Usar este método para generar los archivos “personaOrdenadasPorDni.out” y “personasMayores.out”
  a partir los LinkedList<Persona> obtenidos en los  puntos 2 y 3. Tenga en cuenta que para ésto,
   deberá sobreescribir el método toString de Object para aplanar el objeto Persona a una cadena
    que contiene los colaboradores internos del objeto separado por “;”.

Resolver el problema “Descubriendo nombres repetidos" aplicando Maps.
 La solución implementada debe ser capaz de procesar el archivo “400000nombres.in”. 


	